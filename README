                            krb5-strength 1.1
               (Kerberos password strength checking plugin)

              Maintained by Russ Allbery <rra@stanford.edu>

  Copyright 2006, 2007, 2009, 2010, 2012, 2013 The Board of Trustees of
  the Leland Stanford Junior University.  Portions copyright 1993 Alec
  Muffett.  Developed by Derrick Brashear and Ken Hornstein of Sine Nomine
  Associates, on behalf of Stanford University.

  This software is distributed under a BSD-style license and under the
  Artistic License.  Please see the section LICENSE for more information.

BLURB

  krb5-strength provides mechanisms for checking the strength of Kerberos
  passwords against an external dictionary when a user changes passwords
  in a Kerberos KDC.  It is roughly equivalent to checking password
  strength via CrackLib, except that it embeds a copy of Alec Muffett's
  CrackLib that has been modified to perform slightly more strenuous
  tests.  It supports both Heimdal and MIT Kerberos (1.9 or later).

DESCRIPTION

  Heimdal includes a capability to plug in external password quality
  checks and comes with an example that checks passwords against CrackLib.
  However, in testing at Stanford, we found that CrackLib with its default
  transform rules does not catch passwords that can be guessed using the
  same dictionary with other tools, such as Jack the Ripper.

  This plugin provides the ability to check password quality against the
  standard version of CrackLib, or against a modified version of CrackLib
  that only passes passwords that resist attacks from both Crack and Jack
  the Ripper using the same rule sets.  For Heimdal, it includes both a
  program usable as an external password quality check and a plugin that
  implements the dynamic module API.  For MIT Kerberos (1.9 or later), it
  includes a plugin for the password quality (pwqual) plugin API.

  krb5-strength can be built with either the system CrackLib or with the
  modified version of CrackLib included in this package.  Note, however,
  that if you're building against the system CrackLib, Heimdal includes in
  the distribution a strength-checking plugin and an external password
  check program that use the system CrackLib.  With Heimdal, it would
  probably be easier to use that plugin or program than build this package
  unless you want the modified CrackLib.

  For information about the changes to the CrackLib included in this
  toolkit, see cracklib/HISTORY.  The primary changes are tighter rules,
  which are more aggressive at finding dictionary words with characters
  appended and prepended, which tighten the requirements for password
  entropy, and which add stricter rules for longer passwords.  They are
  also minor changes to fix portability issues and remove some code that
  doesn't make sense in the kadmind context.

  Ideally, the changes to CrackLib should be added to the standard
  CrackLib distribution by adding an additional interface to configure its
  behavior, at which point this package can likely wither away in favor of
  much simpler plugins that link to the standard CrackLib library.

REQUIREMENTS

  For Heimdal, you may use either the external password quality check
  tool, installed as heimdal-strength, or the plugin as you choose.  It
  has been tested with Heimdal 1.2.1 and later, but has not recently been
  tested with versions prior to 1.5.

  For MIT Kerberos, version 1.9 or higher is required for the password
  quality plugin interface.  MIT Kerberos does not support an external
  password quality check tool directly, so you will need to install the
  plugin.

  You can optionally build against the system CrackLib library.  Any
  version should be supported, but note that some versions, particularly
  older versions close to the original code, do things like printing
  diagnostics to stderr, calling exit, and otherwise not being
  well-behaved for use inside plugins or libraries.  If using a system
  CrackLib library, use version 2.8.22 or later to avoid these problems.

  You can also optionally build against the TinyCDB library, which
  provides support for simpler and faster password checking against a CDB
  dictionary file.  Building a CDB dictionary with cdbmake-wordlist
  (included) requires Perl 5.006 or later and the CDB utility that comes
  with TinyCDB.

  For this module to be effective for either Heimdal or MIT Kerberos, you
  will also need to construct a dictionary.  The mkdict and packer
  utilities to build a CrackLib dictionary from a word list are included
  in this toolkit but not installed by default.  You can run them out of
  the cracklib directory after building.  You can also use the utilities
  that come with the stock CrackLib package (often already packaged in a
  Linux distribution); the database format is compatible.  For building a
  CDB dictionary, use the provided cdbmake-wordlist program.  The CDB
  utility must be on your PATH.

  For a word list to use as source for the dictionary, you can use
  /usr/share/dict/words if it's available on your system, but it would be
  better to find a more comprehensive word list.  Since word lists are
  bulky, often covered by murky copyrights, and easily locatable on the
  Internet with a modicum of searching, none are included in this toolkit.

  To bootstrap from a Git checkout, or If you change the Automake files
  and need to regenerate Makefile.in, you will need Automake 1.11 or
  later.  For bootstrap or if you change configure.ac or any of the m4
  files it includes and need to regenerate configure or config.h.in, you
  will need Autoconf 2.64 or later.

COMPILING AND INSTALLING

  You can build and install the plugin with the standard commands:

      ./configure
      make
      make install

  Pass --enable-silent-rules to configure for a quieter build (similar to
  the Linux kernel).  Use make warnings instead of make to build with full
  GCC compiler warnings (requires a relatively current version of GCC).

  The last step will probably have to be done as root.  By default, the
  plugin is installed as /usr/local/lib/kadmind/passwd_strength.so and the
  Heimdal external password check function is installed as
  /usr/local/bin/heimdal-strength.  You can change these paths with the
  --prefix, --libdir, and --bindir options to configure.

  To build with the system version of CrackLib, pass --with-cracklib to
  configure.  You can optionally add a directory, giving the root
  directory where CrackLib was installed, or separately set the include
  and library path with --with-cracklib-include and --with-cracklib-lib.

  krb5-strength will automatically build with TinyCDB if it is found.  To
  specify the installation path of TinyCDB, use --with-tinycdb.  You can
  also separately set the include and library path with
  --with-tinycdb-include and --with-tinycdb-lib.

  Normally, configure will use krb5-config to determine the flags to use
  to compile with your Kerberos libraries.  If krb5-config isn't found, it
  will look for the standard Kerberos libraries in locations already
  searched by your compiler.  If the the krb5-config script first in your
  path is not the one corresponding to the Kerberos libraries you want to
  use or if your Kerberos libraries and includes aren't in a location
  searched by default by your compiler, you need to specify a different
  Kerberos installation root via --with-krb5=PATH.  For example:

      ./configure --with-krb5=/usr/pubsw

  You can also individually set the paths to the include directory and the
  library directory with --with-krb5-include and --with-krb5-lib.  You may
  need to do this if Autoconf can't figure out whether to use lib, lib32,
  or lib64 on your platform.

  To specify a particular krb5-config script to use, either set the
  PATH_KRB5_CONFIG environment variable or pass it to configure like:

      ./configure PATH_KRB5_CONFIG=/path/to/krb5-config

  To not use krb5-config and force library probing even if there is a
  krb5-config script on your path, set PATH_KRB5_CONFIG to a nonexistent
  path:

      ./configure PATH_KRB5_CONFIG=/nonexistent

  krb5-config is not used and library probing is always done if either
  --with-krb5-include or --with-krb5-lib are given.

  You can pass the --enable-reduced-depends flag to configure to try to
  minimize the shared library dependencies encoded in the binaries.  This
  omits from the link line all the libraries included solely because the
  Kerberos libraries depend on them and instead links the programs only
  against libraries whose APIs are called directly.  This will only work
  with shared Kerberos libraries and will only work on platforms where
  shared libraries properly encode their own dependencies (such as Linux).
  It is intended primarily for building packages for Linux distributions
  to avoid encoding unnecessary shared library dependencies that make
  shared library migrations more difficult.  If none of the above made any
  sense to you, don't bother with this flag.

CONFIGURATION

  First, build and install either a CrackLib dictionary as described in
  REQUIREMENTS above, or build a CDB dictionary with cdbmake-wordlist.
  (Or both.)  The CrackLib dictionary will consist of three files, one
  each ending in *.hwm, *.pwd, and *.pwi.  The CDB dictionary will consist
  of a single file ending in *.cdb.  Install those files somewhere on your
  system.  Then, follow the relevant instructions below for either Heimdal
  or MIT Kerberos.

 Heimdal

  There are two options: using an external password check program, or
  using the plugin.  I recommend the external password check program
  unless you encounter speed problems with that approach that cause
  kpasswd to time out.

  For either approach, first add a stanza like the following to the
  [appdefaults] section of your /etc/krb5.conf (or wherever your krb5.conf
  file is located):

      krb5-strength = {
          password_dictionary     = /path/to/cracklib/dictionary
          password_dictionary_cdb = /path/to/cdb/dictionary.cdb
      }

  The first setting configures a CrackLib dictionary and the second a CDB
  dictionary.  The provided path should be the full path to the dictionary
  files, omitting the trailing *.hwm, *.pwd, and *.pwi extensions for the
  CrackLib dictionary.  You can use either or both settings.  If you use
  both, CrackLib will be checked first, and then CDB.

  Then, for the external password checking program, add a new section (or
  modify the existing [password_quality] section) to look like the
  following:

      [password_quality]
          policies         = external-check
          external_program = /usr/local/bin/heimdal-strength

  You can, of course, combine this policy with others.  Replace the path
  with the full path to wherever you have installed heimdal-strength.  You
  can put this section in your kdc.conf instead of krb5.conf if you
  prefer.

  If you want to instead use the module, use the following section
  instead:

      [password_quality]
          policies         = krb5-strength
          policy_libraries = /usr/local/lib/kadmind/passwd_strength.so

  in either krb5.conf or kdc.conf.  Note that some older versions of
  Heimdal have a bug in the support for loading modules when
  policy_libraries is set.  If you get an error like:

      didn't find `kadm5_password_verifier' symbol in `(null)'

  you may have to omit policy_libraries in your configuration and instead
  pass the --check-library argument to kpasswdd specifying the library to
  load.

 MIT Kerberos

  To add this module to the list of password quality checks, add a section
  to krb5.conf (or to a separate kdc.conf if you use that) like:

      [plugins]
          pwqual = {
              module = strength:/usr/local/lib/kadmind/passwd_strength.so
          }

  to register the plugin.

  There are two ways to tell where the dictionary is.  One option is to
  use krb5.conf (and in this case you must use krb5.conf, even if you use
  a separate kdc.conf file).  For this approach, add the following to the
  [appdefaults] section:

      krb5-strength = {
          password_dictionary     = /path/to/cracklib/dictionary
          password_dictionary_cdb = /path/to/cdb/dictionary.cdb
      }

  The first setting configures a CrackLib dictionary and the second a CDB
  dictionary.  The provided path should be the full path to the dictionary
  files, omitting the trailing *.hwm, *.pwd, and *.pwi extensions for the
  CrackLib dictionary.  You can use either or both settings.  If you use
  both, CrackLib will be checked first, and then CDB.

  The second option is to use the normal dict_path setting.  In the
  [realms] section of your krb5.conf kdc.conf, under the appropriate realm
  or realms, specify the path to the dictionary:

      dict_file = /path/to/cracklib/dictionary

  This will be taken as a CrackLib dictionary path, the same as the
  setting for password_dictionary above.  The provided path should be the
  full path to the dictionary files, omitting the trailing *.hwm, *.pwd,
  or *.pwi extension.  However, be aware that, if you use this approach,
  you will probably want to disable the built-in standard dict pwqual
  plugin by adding the line:

      disable = dict

  to the pwqual block of the [plugins] section as shown above.  Otherwise,
  it will also try to load a dictionary at the same path to do simple
  dictionary matching.

  You can also mix and match these settings, by using dict_path for the
  CrackLib dictionary path and krb5.conf for the CDB dictionary path.
  There is no way to specify a CDB dictionary via the dict_path setting.
