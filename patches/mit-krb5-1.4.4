Patch built against MIT Kerberos 1.4.4.  Note that this patch was
generated with some other Stanford-local patches applied and therefore may
not apply entirely cleanly.  I will hopefully have a chance to regenerate
a clean patch against a virgin source tarball for a later release.

This patch may apply to earlier or later versions but may not and will
require verification.

Note that this patch unconditionally adds -ldl to the link line and will
require modification on platforms that use some other library for dlopen
and related calls.


Index: krb5-local/src/lib/kadm5/admin.h
===================================================================
--- krb5-local.orig/src/lib/kadm5/admin.h	2006-06-06 16:22:39.000000000 -0700
+++ krb5-local/src/lib/kadm5/admin.h	2006-06-06 16:29:45.000000000 -0700
@@ -227,6 +227,7 @@ typedef struct _kadm5_config_params {
      char *		admin_keytab;
      char *		acl_file;
      char *		dict_file;
+     char *		pwcheck_plugin;
 
      int		mkey_from_kbd;
      char *		stash_file;
Index: krb5-local/src/lib/kadm5/alt_prof.c
===================================================================
--- krb5-local.orig/src/lib/kadm5/alt_prof.c	2006-06-06 16:22:39.000000000 -0700
+++ krb5-local/src/lib/kadm5/alt_prof.c	2006-06-06 16:29:45.000000000 -0700
@@ -514,7 +514,15 @@ krb5_error_code kadm5_get_config_params(
 	 params.mask |= KADM5_CONFIG_DICT_FILE;
 	 params.dict_file = svalue;
     }
-	    
+
+    /* Right now, always get the value for the pwcheck plugin */
+    hierarchy[2] = "pwcheck_plugin";
+    if (aprofile && !krb5_aprof_get_string(aprofile, hierarchy, TRUE, &svalue)) {
+	params.pwcheck_plugin = svalue;
+   } else {
+	params.pwcheck_plugin = NULL;
+   }
+    
     /* Get the value for the kadmind port */
     if (! (params.mask & KADM5_CONFIG_KADMIND_PORT)) {
 	 hierarchy[2] = "kadmind_port";
Index: krb5-local/src/lib/kadm5/server_internal.h
===================================================================
--- krb5-local.orig/src/lib/kadm5/server_internal.h	2006-06-06 16:22:39.000000000 -0700
+++ krb5-local/src/lib/kadm5/server_internal.h	2006-06-06 16:29:45.000000000 -0700
@@ -59,7 +59,7 @@ krb5_error_code     kdb_iter_entry(kadm5
 				   void *data);
 
 int		    init_dict(kadm5_config_params *);
-int		    find_word(const char *word);
+int		    find_word(const char *word, const char *princ);
 void		    destroy_dict(void);
 
 /* XXX this ought to be in libkrb5.a, but isn't */
Index: krb5-local/src/lib/kadm5/srv/server_dict.c
===================================================================
--- krb5-local.orig/src/lib/kadm5/srv/server_dict.c	2006-06-06 16:22:39.000000000 -0700
+++ krb5-local/src/lib/kadm5/srv/server_dict.c	2006-06-06 16:29:45.000000000 -0700
@@ -24,11 +24,17 @@ static char *rcsid = "$Header$";
 #include    "adm_proto.h"
 #include    <syslog.h>
 #include    "server_internal.h"
+#include    <dlfcn.h>
 
 static char	    **word_list = NULL;	    /* list of word pointers */
 static char	    *word_block = NULL;	    /* actual word data */
 static unsigned int word_count = 0;	    /* number of words */
-
+static void         *plugin_handle = NULL;  /* Library plugin handle */
+static int          (*d_pwcheck_init)(void **, const char *);
+static int	    (*d_pwcheck_check)(void *, const char *, const char *,
+				       char *, int);
+static void         (*d_pwcheck_close)(void *);
+static void	    *d_pwcheck_context;
 
 /*
  * Function: word_compare
@@ -86,6 +92,44 @@ int init_dict(kadm5_config_params *param
 		    *t;
     struct  stat    sb;
     
+    if (plugin_handle != NULL)
+	return KADM5_OK;
+    if (params->pwcheck_plugin) {
+	plugin_handle = dlopen(params->pwcheck_plugin, RTLD_NOW);
+
+	if (! plugin_handle) {
+	    krb5_klog_syslog(LOG_ERR, "WARNING: Unable to load plugin "
+			     "\"%s\": %s, continuing without password checking",
+			     params->pwcheck_plugin, dlerror());
+	    return KADM5_OK;
+	}
+        d_pwcheck_init = dlsym(plugin_handle, "pwcheck_init");
+	d_pwcheck_check = dlsym(plugin_handle, "pwcheck_check");
+	d_pwcheck_close = dlsym(plugin_handle, "pwcheck_close");
+
+        if (d_pwcheck_init == NULL || d_pwcheck_check == NULL ||
+	    d_pwcheck_close == NULL) {
+	    krb5_klog_syslog(LOG_ERR, "WARNING: Needed symbols missing in "
+			     "pwcheck plugin, continuing without password "
+			     "checking.");
+	    dlclose(plugin_handle);
+	    plugin_handle = NULL;
+	    return KADM5_OK;
+	}
+
+	if ((*d_pwcheck_init)(&d_pwcheck_context, params->dict_file)) {
+	    krb5_klog_syslog(LOG_ERR, "WARNING: Plugin initialization failed, "
+			     "continuing without password checking.");
+	    dlclose(plugin_handle);
+	    plugin_handle = NULL;
+	    return KADM5_OK;
+	}
+
+	krb5_klog_syslog(LOG_INFO, "Password checking plugin \"%s\" "
+			 "initialized.", params->pwcheck_plugin);
+	return KADM5_OK;
+    }
+
     if(word_list != NULL && word_block != NULL)
 	return KADM5_OK;
     if (! (params->mask & KADM5_CONFIG_DICT_FILE)) {
@@ -154,10 +198,26 @@ int init_dict(kadm5_config_params *param
  */
 
 int
-find_word(const char *word)
+find_word(const char *word, const char *princ)
 {
     char    **value;
 
+    if (plugin_handle) {
+	char ret_message[256];
+	int ret_value;
+
+	ret_value = (*d_pwcheck_check)(d_pwcheck_context, word, princ,
+				       ret_message, sizeof(ret_message));
+
+	if (ret_value) {
+	    krb5_klog_syslog(LOG_INFO, "pwcheck plugin rejected new change: "
+			     "%s", ret_message);
+	    return KADM5_OK;
+	} else {
+	    return WORD_NOT_FOUND;
+	}
+    }
+
     if(word_list == NULL || word_block == NULL) 
 	    return WORD_NOT_FOUND;
     if ((value = (char **) bsearch(&word, word_list, word_count, sizeof(char *),
@@ -189,6 +249,9 @@ find_word(const char *word)
 void
 destroy_dict(void)
 {
+    if (plugin_handle)
+	(*d_pwcheck_close)(d_pwcheck_context);
+
     if(word_list) {
 	free(word_list);
 	word_list = NULL;
Index: krb5-local/src/lib/kadm5/srv/server_misc.c
===================================================================
--- krb5-local.orig/src/lib/kadm5/srv/server_misc.c	2006-06-06 16:22:39.000000000 -0700
+++ krb5-local/src/lib/kadm5/srv/server_misc.c	2006-06-06 16:29:45.000000000 -0700
@@ -129,6 +129,7 @@ passwd_check(kadm5_server_handle_t handl
 	    npunct = 0,
 	    nspec = 0;
     char    c, *s, *cp;
+    krb5_error_code ret;
 #ifdef HESIOD
     extern  struct passwd *hes_getpwnam();
     struct  passwd *ent;
@@ -159,9 +160,14 @@ passwd_check(kadm5_server_handle_t handl
 	}
 	if ((nupper + nlower + ndigit + npunct + nspec) < pol->pw_min_classes) 
 	    return KADM5_PASS_Q_CLASS;
-	if((find_word(password) == KADM5_OK))
+	ret = krb5_unparse_name(handle->context, principal, &cp);
+	if (ret)
+	    return ret;
+	ret = find_word(password, cp);
+	krb5_free_unparsed_name(handle->context, cp);
+	if(ret == KADM5_OK) {
 	    return KADM5_PASS_Q_DICT;
-	else { 
+	} else { 
 	    int	i, n = krb5_princ_size(handle->context, principal);
 	    cp = krb5_princ_realm(handle->context, principal)->data;
 	    if (strcasecmp(cp, password) == 0)
Index: krb5-local/src/lib/kadm5/Makefile.in
===================================================================
--- krb5-local.orig/src/lib/kadm5/Makefile.in	2006-06-06 16:22:39.000000000 -0700
+++ krb5-local/src/lib/kadm5/Makefile.in	2006-06-06 16:29:45.000000000 -0700
@@ -53,6 +53,8 @@ STLIBOBJS = \
 	str_conv.o \
 	logger.o
 
+SHLIB_EXPLIBS=-ldl
+
 HDRDIR=$(BUILDTOP)/include/kadm5
 HDRS =	$(HDRDIR)/adb.h \
 	$(HDRDIR)/admin.h \
Index: krb5-local/src/config/pre.in
===================================================================
--- krb5-local.orig/src/config/pre.in	2006-06-06 16:31:20.000000000 -0700
+++ krb5-local/src/config/pre.in	2006-06-06 16:31:33.000000000 -0700
@@ -393,7 +393,7 @@ GSS_LIBS	= $(GSS_KRB5_LIB)
 GSSRPC_LIBS	= -lgssrpc $(GSS_LIBS)
 KADM_COMM_LIBS	= $(GSSRPC_LIBS)
 # need fixing if ever used on Mac OS X!
-KADMSRV_LIBS	= -lkadm5srv $(HESIOD_LIBS) $(KDB5_LIBS) $(KADM_COMM_LIBS)
+KADMSRV_LIBS	= -lkadm5srv $(HESIOD_LIBS) $(KDB5_LIBS) $(KADM_COMM_LIBS) -ldl
 KADMCLNT_LIBS	= -lkadm5clnt $(KADM_COMM_LIBS)
 
 # need fixing if ever used on Mac OS X!
