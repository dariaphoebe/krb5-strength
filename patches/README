The patches in this directory apply to MIT Kerberos and add to kadmind a
plugin API for checking the acceptability of a password before any
password (key) change and rejecting the change if the new password is
unsuitable.

Currently, there is only one patch available:

    mit-krb5-1.4.4      Built against MIT Kerberos 1.4.4

This patch should also apply (with some fuzz) to MIT Kerberos 1.6.

More patches against other source trees may be provided in the future.
Please let me know if there is a specific version you wish to see a patch
for (and even better, let me know if you have a tested patch for a
different version).

This patch adds to kadmind a configuration option which should be set in
the local realm section of kdc.conf.  That configuration option is in the
form:

    pwcheck_plugin = /usr/local/lib/kadmind/passwd_strength.so

It passes the value of the existing dict_file configuration option, if
any, into the initialization function.  If this plugin configuration
option is present, the normal password dictionary check in kadmind is
suppressed.


Any plugin used with this patch must implement the following three
interfaces:

int pwcheck_init(void **context, const char *dictionary)

    Initialize the plugin.  A pointer to any data structure that the
    plugin needs to initialize can be stored in context.  dictionary will
    be the value of the dict_path configuration option, if set, and NULL
    otherwise.  Returns 0 on success and non-zero on failure.

int pwcheck_check(void *context, const char *password,
        const char *principal, char *errstr, int errstrlen)

    Called immediately before any password change, at the same point that
    the existing kadmind dictionary check would be called.  context is the
    pointer set by pwcheck_init(), if any.  password is the new password
    and principal is the principal whose password is being changed, in
    case the module wants to apply checks based on the username.  errstr
    is a buffer into which failure messages can be stored and errstrlen is
    the length of that buffer.

    This function should return 0 for success and non-zero for failure.
    On failure, some appropriate error message should be written into the
    errstr buffer (being careful to nul-terminate and not exceed errstrlen
    bytes including the terminating nul).  The return code and the error
    message will be logged by kadmind but not passed back to the client.

    If this call fails (returns a non-zero status), the password change is
    aborted and is not changed in the local KDC database.

void pwcheck_close(void *context)

    Called on kadmind shutdown.  This function is responsible for freeing
    any resources used by the plugin, if any.  context is the pointer set
    by pwcheck_init.
